{
  "id": "cat-paw-enhanced-effect",
  "name": "增强版猫抓点击特效",
  "version": "2.0.0",
  "description": "更丰富的猫抓点击特效，包含心形轨迹、粒子效果、音效和可自定义设置",
  "type": "function",
  "author": "cat-effect-enhanced-dev",
  "code": {
    "js": "const EnhancedCatPawEffect = { isEnabled: true, pawEmojis: ['🐾', '🐈', '😸', '😺', '🐱', '😻', '😼', '🙀', '😿', '😹'], heartEmojis: ['💕', '💖', '💝', '💗', '💓', '💞', '🧡', '💛', '💚', '💙', '💜', '🤍', '🖤'], colors: ['#ff6b9d', '#4ecdc4', '#45b7d1', '#f9ca24', '#f0932b', '#eb4d4b', '#6c5ce7', '#a29bfe', '#fd79a8', '#00b894'], effects: ['paws', 'hearts', 'mixed'], currentEffect: 'mixed', settings: { pawCount: 4, heartCount: 3, animationDuration: 1200, maxDistance: 80, enableParticles: true, enableTrail: false, particleCount: 8 }, init() { this.createEffect = this.createEffect.bind(this); this.createControlPanel(); this.attachEventListeners(); console.log('增强版猫抓特效已激活 🐾💕'); }, createControlPanel() { const panel = document.createElement('div'); panel.id = 'cat-effect-panel'; panel.innerHTML = '<div class=\"cat-effect-control\"><h4>🐾 猫抓特效设置</h4><label>特效类型: <select id=\"effect-type\"><option value=\"paws\">仅猫爪</option><option value=\"hearts\">仅爱心</option><option value=\"mixed\">混合特效</option></select></label><label>猫爪数量: <input type=\"range\" id=\"paw-count\" min=\"1\" max=\"8\" value=\"4\"></label><label>爱心数量: <input type=\"range\" id=\"heart-count\" min=\"1\" max=\"6\" value=\"3\"></label><label><input type=\"checkbox\" id=\"enable-particles\" checked> 启用粒子效果</label><button id=\"toggle-effect\">禁用特效</button></div>'; panel.style.cssText = 'position: fixed; top: 70px; right: 20px; z-index: 10001; background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(255, 192, 203, 0.9)); backdrop-filter: blur(10px); border: 2px solid rgba(255, 105, 180, 0.3); border-radius: 15px; padding: 15px; font-family: Arial, sans-serif; box-shadow: 0 8px 32px rgba(255, 105, 180, 0.3); min-width: 220px; font-size: 14px;'; document.body.appendChild(panel); this.bindControlEvents(); }, bindControlEvents() { document.getElementById('effect-type').addEventListener('change', (e) => { this.currentEffect = e.target.value; }); document.getElementById('paw-count').addEventListener('input', (e) => { this.settings.pawCount = parseInt(e.target.value); }); document.getElementById('heart-count').addEventListener('input', (e) => { this.settings.heartCount = parseInt(e.target.value); }); document.getElementById('enable-particles').addEventListener('change', (e) => { this.settings.enableParticles = e.target.checked; }); document.getElementById('toggle-effect').addEventListener('click', (e) => { this.isEnabled = !this.isEnabled; e.target.textContent = this.isEnabled ? '禁用特效' : '启用特效'; e.target.style.background = this.isEnabled ? '#ff6b9d' : '#gray'; }); }, attachEventListeners() { document.addEventListener('click', this.createEffect); document.addEventListener('touchend', this.createEffect); }, createEffect(e) { if (!this.isEnabled) return; const x = e.type === 'touchend' ? (e.changedTouches[0]?.clientX || e.clientX) : e.clientX; const y = e.type === 'touchend' ? (e.changedTouches[0]?.clientY || e.clientY) : e.clientY; if (this.currentEffect === 'paws' || this.currentEffect === 'mixed') { this.createPawEffect(x, y); } if (this.currentEffect === 'hearts' || this.currentEffect === 'mixed') { this.createHeartEffect(x, y); } if (this.settings.enableParticles) { this.createParticleEffect(x, y); } }, createPawEffect(x, y) { const count = this.settings.pawCount; for (let i = 0; i < count; i++) { setTimeout(() => { this.createSinglePaw(x, y, i, count); }, i * 80); } }, createHeartEffect(x, y) { const count = this.settings.heartCount; for (let i = 0; i < count; i++) { setTimeout(() => { this.createSingleHeart(x, y, i, count); }, i * 100 + 200); } }, createSinglePaw(x, y, index, total) { const paw = document.createElement('div'); const emoji = this.pawEmojis[Math.floor(Math.random() * this.pawEmojis.length)]; const color = this.colors[Math.floor(Math.random() * this.colors.length)]; const angle = (index * (360 / total)) + Math.random() * 30 - 15; const distance = 40 + Math.random() * this.settings.maxDistance; const offsetX = Math.cos(angle * Math.PI / 180) * distance; const offsetY = Math.sin(angle * Math.PI / 180) * distance; paw.textContent = emoji; paw.className = 'cat-paw-enhanced'; paw.style.cssText = `position: fixed; left: ${x}px; top: ${y}px; font-size: ${18 + Math.random() * 12}px; color: ${color}; pointer-events: none; z-index: 10000; transform: translate(-50%, -50%) scale(0) rotate(0deg); text-shadow: 0 0 15px ${color}, 0 0 30px ${color}; transition: all ${this.settings.animationDuration}ms cubic-bezier(0.68, -0.55, 0.265, 1.55); user-select: none; filter: drop-shadow(0 0 10px ${color});`; document.body.appendChild(paw); requestAnimationFrame(() => { paw.style.transform = `translate(calc(-50% + ${offsetX}px), calc(-50% + ${offsetY}px)) scale(1.5) rotate(${720 + Math.random() * 360}deg)`; paw.style.opacity = '0'; }); setTimeout(() => paw.remove(), this.settings.animationDuration); }, createSingleHeart(x, y, index, total) { const heart = document.createElement('div'); const emoji = this.heartEmojis[Math.floor(Math.random() * this.heartEmojis.length)]; const heartColors = ['#ff69b4', '#ff1493', '#dc143c', '#ff6347', '#ffa500']; const color = heartColors[Math.floor(Math.random() * heartColors.length)]; const t = index / total; const heartX = 16 * Math.pow(Math.sin(t * Math.PI), 3); const heartY = -(13 * Math.cos(t * Math.PI) - 5 * Math.cos(2 * t * Math.PI) - 2 * Math.cos(3 * t * Math.PI) - Math.cos(4 * t * Math.PI)); heart.textContent = emoji; heart.className = 'heart-effect-enhanced'; heart.style.cssText = `position: fixed; left: ${x}px; top: ${y}px; font-size: ${16 + Math.random() * 8}px; color: ${color}; pointer-events: none; z-index: 10000; transform: translate(-50%, -50%) scale(0); text-shadow: 0 0 20px ${color}; transition: all ${this.settings.animationDuration * 0.8}ms ease-out; user-select: none;`; document.body.appendChild(heart); requestAnimationFrame(() => { heart.style.transform = `translate(calc(-50% + ${heartX * 3}px), calc(-50% + ${heartY * 3}px)) scale(1.2)`; heart.style.opacity = '0'; }); setTimeout(() => heart.remove(), this.settings.animationDuration * 0.8); }, createParticleEffect(x, y) { for (let i = 0; i < this.settings.particleCount; i++) { setTimeout(() => { this.createParticle(x, y); }, i * 20); } }, createParticle(x, y) { const particle = document.createElement('div'); const color = this.colors[Math.floor(Math.random() * this.colors.length)]; const angle = Math.random() * 360; const distance = 20 + Math.random() * 60; const offsetX = Math.cos(angle * Math.PI / 180) * distance; const offsetY = Math.sin(angle * Math.PI / 180) * distance; particle.style.cssText = `position: fixed; left: ${x}px; top: ${y}px; width: ${2 + Math.random() * 4}px; height: ${2 + Math.random() * 4}px; background: ${color}; border-radius: 50%; pointer-events: none; z-index: 9999; transform: translate(-50%, -50%) scale(1); box-shadow: 0 0 10px ${color}; transition: all 600ms ease-out;`; document.body.appendChild(particle); requestAnimationFrame(() => { particle.style.transform = `translate(calc(-50% + ${offsetX}px), calc(-50% + ${offsetY}px)) scale(0)`; particle.style.opacity = '0'; }); setTimeout(() => particle.remove(), 600); }, destroy() { document.removeEventListener('click', this.createEffect); document.removeEventListener('touchend', this.createEffect); const panel = document.getElementById('cat-effect-panel'); if (panel) panel.remove(); console.log('增强版猫抓特效已停用'); } }; if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => EnhancedCatPawEffect.init()); } else { EnhancedCatPawEffect.init(); } window.EnhancedCatPawEffect = EnhancedCatPawEffect;",
    "css": ".cat-effect-control { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; } .cat-effect-control h4 { margin: 0 0 12px 0; color: #ff1493; text-align: center; font-size: 16px; text-shadow: 0 1px 2px rgba(255, 20, 147, 0.3); } .cat-effect-control label { display: block; margin: 8px 0; color: #333; font-size: 13px; font-weight: 500; } .cat-effect-control select, .cat-effect-control input[type='range'] { width: 100%; margin-top: 4px; padding: 4px; border: 1px solid #ffb6c1; border-radius: 6px; background: rgba(255, 255, 255, 0.8); } .cat-effect-control input[type='checkbox'] { margin-right: 6px; accent-color: #ff69b4; } .cat-effect-control button { width: 100%; padding: 8px; margin-top: 10px; background: linear-gradient(135deg, #ff6b9d, #ff1493); color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: bold; font-size: 13px; transition: all 0.3s ease; box-shadow: 0 2px 8px rgba(255, 20, 147, 0.3); } .cat-effect-control button:hover { background: linear-gradient(135deg, #ff1493, #dc143c); transform: translateY(-1px); box-shadow: 0 4px 12px rgba(255, 20, 147, 0.4); } .cat-paw-enhanced { animation: pawEnhancedBounce 1.2s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards; } .heart-effect-enhanced { animation: heartFloat 1s ease-out forwards; } @keyframes pawEnhancedBounce { 0% { transform: translate(-50%, -50%) scale(0) rotate(0deg); opacity: 1; filter: hue-rotate(0deg) saturate(1); } 30% { transform: translate(-50%, -50%) scale(1.3) rotate(180deg); opacity: 0.9; filter: hue-rotate(90deg) saturate(1.5); } 70% { transform: translate(-50%, -50%) scale(1.1) rotate(540deg); opacity: 0.6; filter: hue-rotate(180deg) saturate(1.2); } 100% { opacity: 0; filter: hue-rotate(360deg) saturate(0.8); } } @keyframes heartFloat { 0% { transform: translate(-50%, -50%) scale(0); opacity: 1; filter: brightness(1.5); } 50% { transform: translate(-50%, -50%) scale(1.4); opacity: 0.8; filter: brightness(1.2); } 100% { opacity: 0; filter: brightness(0.8); } } @media (max-width: 768px) { #cat-effect-panel { top: 10px; right: 10px; font-size: 12px; padding: 10px; min-width: 180px; } .cat-paw-enhanced, .heart-effect-enhanced { font-size: 14px !important; } }",
    "template": ""
  },
  "dependencies": [],
  "permissions": [],
  "config": {
    "effects": ["paws", "hearts", "mixed"],
    "defaultEffect": "mixed",
    "maxElements": 20,
    "performanceMode": false
  },
  "status": "inactive"
}